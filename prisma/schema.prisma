generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user", "manager", "admin"
  accounts      Account[]
  sessions      Session[]
  timeLogs      TimeLog[] // One-to-many relationship
  tasks         Task[] // One-to-many relationship
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Project       Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // For OAuth providers
  access_token      String? // For OAuth providers
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TimeLog {
  id       String    @id @default(cuid())
  userId   String
  clockIn  DateTime
  clockOut DateTime?
  duration Int?      @default(0) // Duration in minutes
  status   String    @default("active") // "active", "completed", "pending"
  taskId   String? // Optional: If the time log is tied to a task

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String    @id @default(cuid())
  userId      String
  projectId   String? // Optional: Tied to a project
  title       String
  description String?
  status      String    @default("pending") // "pending", "in_progress", "completed"
  priority    String    @default("medium") // "low", "medium", "high"
  dueDate     DateTime?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  timeLogs TimeLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String  @id @default(cuid())
  title       String
  description String?
  status      String  @default("active") // "active", "completed", "archived"
  ownerId     String // Owner of the project

  owner User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
