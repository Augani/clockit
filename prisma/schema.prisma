generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  role                  String                @default("user") // "user", "manager", "admin", "super_admin"
  department            String                @default("IT")
  position              String                @default("Developer")
  employeeId            String?               @unique
  joinDate             DateTime               @default(now())
  timezone             String                 @default("UTC")
  phone                String?
  address              String?

  // Relations
  accounts             Account[]
  sessions             Session[]
  timeLogs             TimeLog[]
  tasks                Task[]
  projects             Project[]
  documents            Document[]
  workingHours         WorkingHours?
  notificationSettings NotificationSettings?
  emergencyContact     EmergencyContact?

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  @@index([email])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TimeLog {
  id            String    @id @default(cuid())
  userId        String
  clockIn       DateTime
  clockOut      DateTime?
  duration      Int?      @default(0)
  status        String    @default("active")
  breakStart    DateTime?
  breakEnd      DateTime?
  breakDuration Int?      @default(0)
  notes         String?   @db.Text

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks         Task[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, clockIn])
  @@index([userId])
  @@index([clockIn])
}

model Task {
  id          String    @id @default(cuid())
  description String    @db.Text
  duration    Int
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  timeLogId   String
  timeLog     TimeLog   @relation(fields: [timeLogId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)

  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([timeLogId])
  @@index([projectId])
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  status      String    @default("active") // "active", "completed", "archived"
  startDate   DateTime  @default(now())
  endDate     DateTime?
  budget      Float?
  ownerId     String
  members     String[]  // Array of user IDs
  tags        String[]
  priority    String    @default("medium") // "low", "medium", "high"

  // Relations
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ownerId])
}

model WorkingHours {
  id            String   @id @default(cuid())
  userId        String   @unique
  startTime     String   @default("09:00") // 24-hour format
  endTime       String   @default("17:00") // 24-hour format
  breakTime     Int      @default(60) // Break duration in minutes
  workDays      String[] @default(["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY"])
  maxDailyHours Int      @default(12)
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NotificationSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  emailEnabled  Boolean  @default(true)
  pushEnabled   Boolean  @default(true)
  weeklySummary Boolean  @default(false)
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Document {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  fileUrl     String
  fileName    String
  fileType    String
  fileSize    Int      // in bytes
  category    String   // "COMPANY_POLICIES", "HR_DOCUMENTS", "PROJECT_TEMPLATES", "TRAINING_MATERIALS"
  uploadedBy  String
  tags        String[]
  isPublic    Boolean  @default(true)
  viewCount   Int      @default(0)
  
  // Relations
  user        User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([uploadedBy])
}

model EmergencyContact {
  id           String @id @default(cuid())
  userId       String @unique
  name         String
  phone        String
  relationship String
  
  // Relations
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
